import sounddevice as sd
import scipy.io.wavfile as wav
import numpy as np
import keyboard
import requests
import tempfile
import pyperclip
import time
import os

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
API_URL = "http://127.0.0.1:6431/transcribe"  # —Ç–≤–æ–π –ª–æ–∫–∞–ª—å–Ω—ã–π API
LANGUAGE = "ru"        # "ru", "en", "auto"
MODEL = "turbo"        # Whisper –º–æ–¥–µ–ª—å: tiny, base, small, medium, large, turbo
USE_CLIPBOARD = True   # True = –≤—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Ctrl+V, False = –ø–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥
samplerate = 16000     # Whisper –ª—é–±–∏—Ç 16–∫–ì—Ü

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
is_recording = False
recording_data = []



def callback(indata, frames, time_info, status):
    """–°–æ–±–∏—Ä–∞–µ–º –∑–≤—É–∫ –≤ –ø–∞–º—è—Ç—å"""
    if is_recording:
        recording_data.append(indata.copy())


def toggle_recording():
    global is_recording, recording_data
    if not is_recording:
        print("üéô –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏...")
        recording_data = []
        is_recording = True
    else:
        print("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏...")
        is_recording = False
        save_and_transcribe()


def save_and_transcribe():
    global recording_data
    if not recording_data:
        return

    # –°–∫–ª–µ–∏–≤–∞–µ–º –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
    audio = np.concatenate(recording_data, axis=0)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as f:
        wav.write(f.name, samplerate, audio)
        temp_path = f.name

    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    try:
        with open(temp_path, "rb") as f:
            files = {"file": ("audio.wav", f, "audio/wav")}
            data = {
                "language": LANGUAGE,
                "model": MODEL,
                "prompt": ""
            }
            resp = requests.post(API_URL, files=files, data=data)

        resp.raise_for_status()
        text = resp.json()["text"].strip()
        print("‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ:", text)

        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if USE_CLIPBOARD:
            old_clipboard = pyperclip.paste()  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –±—ã–ª–æ –≤ –±—É—Ñ–µ—Ä–µ
            pyperclip.copy(text)
            time.sleep(0.05)  # —á—Ç–æ–±—ã –±—É—Ñ–µ—Ä —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
            keyboard.press_and_release("ctrl+v")
            time.sleep(0.05)
            pyperclip.copy(old_clipboard)  # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        else:
            keyboard.write(text, delay=0)  # –±—ã—Å—Ç—Ä—ã–π –ø–æ—Å–∏–º–≤–æ–ª—å–Ω—ã–π –≤–≤–æ–¥

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
    finally:
        os.unlink(temp_path)


def main():
    print("–ù–∞–∂–º–∏ Alt+Q –¥–ª—è —Å—Ç–∞—Ä—Ç–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏. alt+Esc –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    keyboard.add_hotkey("alt+q", toggle_recording)

    with sd.InputStream(samplerate=samplerate, channels=1, callback=callback):
        keyboard.wait("alt+esc")


if __name__ == "__main__":
    main()
